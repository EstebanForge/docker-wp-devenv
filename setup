#!/bin/bash

# WordPress Docker Environment - First Time Setup
# Interactive setup script for WordPress Docker development environment

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
  echo -e "\n${BLUE}=== $1 ===${N      # Note: Container wp-content removal was here but is now handled by bind mount"
}

print_success() {
  echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
  echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
  echo -e "${RED}❌ $1${NC}"
}

# Validate required dependencies
check_dependencies() {
  print_header "Checking Dependencies"

  local missing_deps=()

  # Check Docker
  if ! command -v docker &>/dev/null; then
    missing_deps+=("docker")
  fi

  # Check Docker Compose
  if ! command -v docker-compose &>/dev/null; then
    missing_deps+=("docker-compose")
  fi

  # Check envsubst (for nginx config generation)
  if ! command -v envsubst &>/dev/null; then
    missing_deps+=("gettext (for envsubst)")
  fi

  # Check Composer
  if ! command -v composer &>/dev/null; then
    missing_deps+=("composer")
  fi

  if [ ${#missing_deps[@]} -gt 0 ]; then
    print_error "Missing required dependencies:"
    for dep in "${missing_deps[@]}"; do
      echo "  - $dep"
    done
    echo ""
    echo "Please install missing dependencies and run this script again."
    exit 1
  fi

  print_success "All dependencies found"
}

# Generate secure password
generate_password() {
  local length=${1:-16}
  openssl rand -base64 32 | tr -d "=+/" | cut -c1-${length}
}

# Prompt for user input with default values
prompt_with_default() {
  local prompt="$1"
  local default="$2"
  local var_name="$3"
  local is_password="${4:-false}"

  if [ "$is_password" = "true" ]; then
    echo -n -e "${prompt} [${default}]: "
    read -s user_input
    echo
  else
    echo -n -e "${prompt} [${default}]: "
    read user_input
  fi

  if [ -z "$user_input" ]; then
    eval "$var_name=\"$default\""
  else
    eval "$var_name=\"$user_input\""
  fi
}

# Collect user configuration
collect_configuration() {
  print_header "WordPress Configuration"

  echo "Please provide the following configuration for your WordPress environment:"
  echo ""

  # WordPress Domain
  prompt_with_default "Local domain name" "wp.localhost" "WP_DOMAIN"
  # Ensure .localhost TLD if not provided
  if [[ "${WP_DOMAIN}" != *.* ]]; then
    WP_DOMAIN="${WP_DOMAIN}.localhost"
    echo -e "${YELLOW}ℹ️  No TLD provided for domain, defaulted to: ${WP_DOMAIN}${NC}"
  fi

  # WordPress Site Title
  prompt_with_default "WordPress site title" "${WP_DOMAIN}" "WP_TITLE"

  # Admin User
  prompt_with_default "Admin username" "admin" "WP_ADMIN_USER"

  # Admin Password
  prompt_with_default "Admin password" "password" "WP_ADMIN_PASSWORD" true

  # Admin Email
  prompt_with_default "Admin email" "admin@${WP_DOMAIN}" "WP_ADMIN_EMAIL"

  print_header "Database Configuration"

  # MySQL credentials - fixed for local development
  MYSQL_ROOT_PASSWORD="wordpress_root_pass"
  MYSQL_USER="wordpress_user"
  MYSQL_PASSWORD="wordpress_pass"

  print_success "Using standard MySQL credentials for local development"

  print_header "Performance Configuration"

  # Memory Limit - fixed at 256MB
  WP_MEMORY_LIMIT="256M"

  print_success "WordPress memory limit set to 256MB"

  echo ""
  print_success "Configuration collected"
}

# Generate .env file
generate_env_file() {
  print_header "Generating Environment Configuration"

  # Sanitize WP_DOMAIN to create a valid project name for COMPOSE_PROJECT_NAME
  # Docker Compose project names should be lowercase alphanumeric, can include underscores or hyphens
  local project_name=$(echo "${WP_DOMAIN}" | tr '.' '_' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_-]//g')
  COMPOSE_PROJECT_NAME="${project_name:-defaultwp}" # Fallback if somehow empty

  cat >.env <<EOF
# Docker Compose Performance
COMPOSE_BAKE=true

COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME}
# WordPress Configuration
WP_DOMAIN=${WP_DOMAIN}
WP_TITLE=${WP_TITLE}
WP_ADMIN_USER=${WP_ADMIN_USER}
WP_ADMIN_PASSWORD=${WP_ADMIN_PASSWORD}
WP_ADMIN_EMAIL=${WP_ADMIN_EMAIL}
WP_URL=https://${WP_DOMAIN}

# WordPress Performance & File System
WP_MEMORY_LIMIT=${WP_MEMORY_LIMIT}
FS_METHOD=direct
WP_ENVIRONMENT_TYPE=development

# WordPress Debug Configuration
WORDPRESS_DEBUG=true
WP_DEBUG_LOG=true
WP_DEBUG_DISPLAY=true
SCRIPT_DEBUG=true
SAVEQUERIES=true

# Xdebug Configuration
XDEBUG_MODE=debug
XDEBUG_TRIGGER=XDEBUG_TRIGGER

# MySQL Configuration
MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
MYSQL_USER=${MYSQL_USER}
MYSQL_PASSWORD=${MYSQL_PASSWORD}
EOF

  print_success ".env file created successfully"
}

# Display configuration summary
display_summary() {
  print_header "Configuration Summary"

  echo -e "WordPress Site:"
  echo -e "  Domain: ${BLUE}https://${WP_DOMAIN}${NC}"
  echo -e "  Title: ${WP_TITLE}"
  echo -e "  Admin User: ${WP_ADMIN_USER}"
  echo -e "  Admin Email: ${WP_ADMIN_EMAIL}"
  echo ""
  echo -e "MySQL Database:"
  echo -e "  User: ${MYSQL_USER}"
  echo -e "  Memory Limit: ${WP_MEMORY_LIMIT}"
  echo ""
}

# Run setup scripts
run_setup_scripts() {
  print_header "Running Setup Scripts"

  # Make scripts executable
  # Make all .sh scripts in the scripts/ directory executable
  if compgen -G "scripts/*.sh" >/dev/null; then
    chmod +x scripts/*.sh
    print_success "Made all .sh files in scripts/ executable."
  else
    print_warning "No .sh files found in scripts/ to make executable."
  fi

  # Run Fedora-specific setup if available
  if [ -f "scripts/setup-fedora.sh" ]; then
    print_success "Running Fedora setup..."
    ./scripts/setup-fedora.sh
  else
    print_warning "scripts/setup-fedora.sh not found, creating directories manually..."
    mkdir -p src/{themes,plugins,uploads,mu-plugins}
    mkdir -p php-conf nginx-conf
    chmod -R 775 src/
  fi

  # Generate nginx configuration
  if [ -f "scripts/generate-nginx-config.sh" ]; then
    print_success "Generating Nginx configuration..."
    ./scripts/generate-nginx-config.sh
  fi

  # Setup local domain
  if [ -f "scripts/setup-local-domain.sh" ]; then
    print_success "Setting up local domain..."
    ./scripts/setup-local-domain.sh
  fi

  # Setup SSL certificates
  if [ -f "scripts/setup-ssl.sh" ]; then
    print_success "Setting up SSL certificates..."
    chmod +x scripts/setup-ssl.sh
    ./scripts/setup-ssl.sh
  fi

  # Create wp-config.php
  if [ -f "scripts/create-wp-config.sh" ]; then
    print_success "Creating WordPress configuration..."
    ./scripts/create-wp-config.sh
  fi

  # Install Composer dependencies
  print_success "Installing Composer dependencies..."
  composer install --optimize-autoloader

  # Function to bring up Docker services with a retry mechanism for port conflicts.
  docker_up_with_retry() {
      echo "🚀 Bringing up Docker services via docker-compose..."

      # First attempt
      if docker-compose up -d; then
          echo "✅ Docker services started successfully on the first attempt."
          return 0
      fi

      echo -e "\n🔴 Initial 'docker-compose up' failed. Checking for conflicting containers..."

      # Identify the project name from the current directory to exclude its containers from being stopped.
      # Assumes the .env file is correctly setting COMPOSE_PROJECT_NAME.
      local project_name
      project_name=$(grep COMPOSE_PROJECT_NAME .env | cut -d '=' -f 2)
      if [ -z "$project_name" ]; then
          # Fallback to directory name if .env isn't set up as expected.
          project_name=$(basename "$PWD")
      fi

      # Find and stop all running containers that do NOT belong to the current project.
      local other_containers
      other_containers=$(docker ps -q --format '{{.Names}}' | grep -v "^${project_name}_")

      if [ -n "$other_containers" ]; then
          echo "   Found running containers from other projects. Stopping them to free up ports..."
          # The tr command converts the newline-separated list from docker ps into a space-separated list for docker stop.
          # xargs handles the case where there might be no containers to stop.
          echo "$other_containers" | tr '\n' ' ' | xargs -r docker stop
          echo "   Stopped containers: $(echo "$other_containers" | tr '\n' ' ')"
      else
          echo "   No other running containers found. The issue might be something other than a port conflict."
      fi

      echo -e "\n🔄 Retrying 'docker-compose up'..."
      if docker-compose up -d; then
          echo "✅ Docker services started successfully on the second attempt."
          return 0
      else
          echo -e "\n🔴 'docker-compose up' failed on the second attempt. Please check the logs above for errors."
          return 1
      fi
  }

  # Start Docker services with retry logic
  print_success "Starting Docker services..."
  if docker_up_with_retry; then
    # Install WordPress (only if containers are running)
    if docker-compose ps | grep -q "Up"; then
      print_success "Installing WordPress..."
      source .env && ./wp core install \
        --url="${WP_URL}" \
        --title="${WP_TITLE}" \
        --admin_user="${WP_ADMIN_USER}" \
        --admin_password="${WP_ADMIN_PASSWORD}" \
        --admin_email="${WP_ADMIN_EMAIL}" \
        --skip-email

      # Activate plugins and theme
      ./wp plugin activate --all
      ./wp theme activate twentytwentyfive

      # Remove default WordPress content to ensure clean installation
      if [ -d "src/wp-core/wp-content" ]; then
        echo "🗑️ Removing default WordPress content..."
        rm -rf src/wp-core/wp-content
        echo "   Default wp-content directory removed"
      fi

      # Also remove from inside the container to ensure volume mount works
      echo "🔧 Ensuring container volume mount is working..."
      docker-compose exec -T php rm -rf /var/www/html/wp-content 2>/dev/null || true
      echo "   Container wp-content directory cleared"

      print_success "WordPress installation completed!"
    else
      print_warning "Docker containers not running. WordPress will be installed on first ./start"
    fi
  else
    print_warning "Failed to start Docker services. WordPress will be installed on first ./start"
  fi

  # Make WP-CLI wrapper executable
  chmod +x wp
  # And our start script too
  chmod +x start
}

# Generate setup information file
generate_setup_info() {
  print_header "Generating Setup Information"

  cat >SETUP-INFO.md <<EOF
# WordPress Docker Environment - Setup Information

## 🎉 Your WordPress Docker environment is ready!

### Next Steps
1. Start the environment: \`./start\`
2. Wait for containers to start (about 30-60 seconds)
3. Visit your site: [https://${WP_DOMAIN}](https://${WP_DOMAIN})

### WordPress Admin Access
- **URL**: [https://${WP_DOMAIN}/wp-admin/](https://${WP_DOMAIN}/wp-admin/)
- **Username**: \`${WP_ADMIN_USER}\`
- **Password**: \`${WP_ADMIN_PASSWORD}\`

### Useful Commands

#### Docker Management
\`\`\`bash
# View logs
docker-compose logs -f

# Stop environment
docker-compose down

# Restart environment
docker-compose restart

# Start environment
docker-compose up -d
\`\`\`

#### WordPress CLI
\`\`\`bash
# Run WP-CLI commands
./wp <command>

# Examples:
./wp core version
./wp plugin list
./wp theme list
\`\`\`

#### Package Management
\`\`\`bash
# Install plugins via Composer
composer require wpackagist-plugin/plugin-name

# Install themes via Composer
composer require wpackagist-theme/theme-name

# Run code quality checks
composer run quality
\`\`\`

### Environment Configuration
- **Domain**: ${WP_DOMAIN}
- **Site Title**: ${WP_TITLE}
- **Admin Email**: ${WP_ADMIN_EMAIL}
- **Memory Limit**: ${WP_MEMORY_LIMIT}
- **Environment**: Development (Debug enabled)

### Important Notes
- 🔐 Keep your passwords secure!
- 📋 Full configuration is saved in the \`.env\` file
- 🐛 Debug mode is enabled for development
- 🔧 Xdebug is configured and ready to use

---
*Generated on $(date) by WordPress Docker Environment Setup*
EOF

  print_success "SETUP-INFO.md created successfully"
}

# Final instructions
display_final_instructions() {
  print_header "Setup Complete!"

  echo -e "${GREEN}🎉 Your WordPress Docker environment is ready!${NC}"
  echo ""
  echo -e "Next steps:"
  echo -e "  1. Start the environment: ${BLUE}./start${NC}"
  echo -e "  2. Wait for containers to start (about 10-30 seconds, depends on your system)"
  echo -e "  3. Visit your site: ${BLUE}https://${WP_DOMAIN}${NC}"
  echo ""
  echo -e "WordPress Admin Access:"
  echo -e "  URL: ${BLUE}https://${WP_DOMAIN}/wp-admin/${NC}"
  echo -e "  Username: ${BLUE}${WP_ADMIN_USER}${NC}"
  echo -e "  Password: ${BLUE}${WP_ADMIN_PASSWORD}${NC}"
  echo ""
  echo -e "Useful commands:"
  echo -e "  View logs: ${BLUE}docker-compose logs -f${NC}"
  echo -e "  Stop environment: ${BLUE}docker-compose down${NC}"
  echo -e "  Restart environment: ${BLUE}docker-compose restart${NC}"
  echo -e "  Run WP-CLI: ${BLUE}./wp <command>${NC}"
  echo -e "  Install plugins: ${BLUE}composer require wpackagist-plugin/plugin-name${NC}"
  echo -e "  Code quality: ${BLUE}composer run quality${NC}"
  echo ""
  echo -e "${YELLOW}📋 Configuration saved to .env file${NC}"
  echo -e "${YELLOW}📖 Setup information saved to SETUP-INFO.md${NC}"
  echo -e "${YELLOW}🔐 Keep your passwords secure!${NC}"
}

# Main execution
main() {
  echo -e "${BLUE}"
  echo "╔══════════════════════════════════════════════════════════════╗"
  echo "║              WordPress Docker Environment Setup              ║"
  echo "║                     First Time Configuration                 ║"
  echo "╚══════════════════════════════════════════════════════════════╝"
  echo -e "${NC}"

  # Clean up previous run artifacts to ensure permissions are set on next start
  rm -f .permissions_set

  # Remove any existing wp-content directory from wp-core to ensure clean setup
  if [ -d "src/wp-core/wp-content" ]; then
    echo "🗑️ Removing existing wp-content directory from wp-core..."
    rm -rf src/wp-core/wp-content
    echo "   wp-content directory removed"
  fi

  # Check if .env already exists
  if [ -f ".env" ]; then
    echo ""
    print_warning ".env file already exists!"
    echo -n "Do you want to overwrite it? (y/N): "
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
      echo "Setup cancelled."
      exit 0
    fi
    echo ""
  fi

  # Run setup steps
  check_dependencies
  collect_configuration
  display_summary

  echo ""
  echo -n "Continue with setup? (Y/n): "
  read -r response
  if [[ "$response" =~ ^[Nn]$ ]]; then
    echo "Setup cancelled."
    exit 0
  fi

  generate_env_file
  run_setup_scripts

  # Set permissions for src directory
  if [ -f "./scripts/set-src-permissions.sh" ]; then
    print_header "Setting src/ Directory Permissions"
    if ./scripts/set-src-permissions.sh; then
      print_success "src/ directory permissions set successfully."
    else
      print_warning "Failed to set src/ directory permissions. Please check ./scripts/set-src-permissions.sh output."
    fi
  else
    print_warning "./scripts/set-src-permissions.sh not found. Skipping permission setup for src/."
  fi

  generate_setup_info
  display_final_instructions
}

# Trap errors
trap 'print_error "Setup failed! Check the error messages above."; exit 1' ERR

# Run main function
main "$@"

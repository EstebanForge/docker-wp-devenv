#!/bin/bash
# Wrapper script to run docker-compose up and then set source permissions.

set -e # Exit immediately if a command exits with a non-zero status.

# Check if Docker daemon is running, try to start if not
if ! docker info >/dev/null 2>&1; then
  echo "🔄 Docker daemon is not running. Attempting to start Docker..."
  if command -v systemctl >/dev/null 2>&1; then
    if sudo systemctl start docker; then
      echo "   Docker daemon started via systemctl."
      # Wait for Docker to be ready
      for i in {1..10}; do
        if docker info >/dev/null 2>&1; then
          break
        fi
        sleep 1
      done
      if ! docker info >/dev/null 2>&1; then
        echo "🔴 Error: Docker daemon did not start successfully."
        exit 1
      fi
    else
      echo "🔴 Error: Failed to start Docker daemon with systemctl."
      exit 1
    fi
  else
    echo "🔴 Error: Docker is not running and systemctl is not available. Please start Docker manually."
    exit 1
  fi
fi

# Get the directory where this script is located (should be project root)
PROJECT_ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PERMISSION_SCRIPT_PATH="${PROJECT_ROOT_DIR}/scripts/set-src-permissions.sh"

# Function to ensure wp-config.php exists
ensure_wp_config() {
  local wp_config_path="src/wp-core/wp-config.php"

  # Check if wp-config.php already exists
  if [ -f "$wp_config_path" ]; then
    echo "✅ wp-config.php already exists"
    return 0
  fi

  # Create wp-config.php using the dedicated script
  if [ -f "scripts/create-wp-config.sh" ]; then
    echo "📝 Creating wp-config.php..."
    ./scripts/create-wp-config.sh
  else
    echo "⚠️  scripts/create-wp-config.sh not found"
    return 1
  fi
}

# Check if SETUP-INFO.md exists
if [ ! -f "${PROJECT_ROOT_DIR}/SETUP-INFO.md" ]; then
  echo "🔴 Error: SETUP-INFO.md not found in '${PROJECT_ROOT_DIR}'."
  echo "   Please run './setup.sh' first to generate the necessary configuration and information file."
  exit 1
fi

# Ensure wp-config.php exists
ensure_wp_config

# Remove default WordPress content, not used here
if [ -d "src/wp-core/wp-content" ]; then
  echo "🗑️ Removing default WordPress content..."
  rm -rf src/wp-core/wp-content
  echo "   Default wp-content directory removed"
fi

echo "🚀 Bringing up Docker services via docker-compose..."

# Change to the project root directory to ensure docker-compose finds its file
cd "${PROJECT_ROOT_DIR}" || exit

# Check if --build flag is passed to force a permissions check
force_permission_check=false
for arg in "$@"; do
  if [[ "$arg" == "--build" ]]; then
    force_permission_check=true
    break
  fi
done

# Check if any arguments were passed
# Function to bring up Docker services with a retry mechanism for port conflicts.
docker_up_with_retry() {
    echo "🚀 Bringing up Docker services via docker-compose..."

    # First attempt
    if docker-compose up "$@"; then
        echo "✅ Docker services started successfully on the first attempt."
        return 0
    fi

    echo -e "\n🔴 Initial 'docker-compose up' failed. Checking for conflicting containers..."

    # Identify the project name from the current directory to exclude its containers from being stopped.
    # Assumes the .env file is correctly setting COMPOSE_PROJECT_NAME.
    local project_name
    project_name=$(grep COMPOSE_PROJECT_NAME .env | cut -d '=' -f 2)
    if [ -z "$project_name" ]; then
        # Fallback to directory name if .env isn't set up as expected.
        project_name=$(basename "$PWD")
    fi

    # Find and stop all running containers that do NOT belong to the current project.
    local other_containers
    other_containers=$(docker ps -q --format '{{.Names}}' | grep -v "^${project_name}_")

    if [ -n "$other_containers" ]; then
        echo "   Found running containers from other projects. Stopping them to free up ports..."
        # The tr command converts the newline-separated list from docker ps into a space-separated list for docker stop.
        # xargs handles the case where there might be no containers to stop.
        echo "$other_containers" | tr '\n' ' ' | xargs -r docker stop
        echo "   Stopped containers: $(echo "$other_containers" | tr '\n' ' ')"
    else
        echo "   No other running containers found. The issue might be something other than a port conflict."
    fi

    echo -e "\n🔄 Retrying 'docker-compose up'..."
    if docker-compose up "$@"; then
        echo "✅ Docker services started successfully on the second attempt."
        return 0
    else
        echo -e "\n🔴 'docker-compose up' failed on the second attempt. Please check the logs above for errors."
        return 1
    fi
}

# Determine arguments and call the retry function.
if [ $# -eq 0 ]; then
    echo "   No arguments provided, defaulting to detached mode (-d)."
    docker_up_with_retry -d
    up_status=$?
    was_detached_by_default=true
else
    echo "   Passing arguments to docker-compose up: $@"
    docker_up_with_retry "$@"
    up_status=$?
    was_detached_by_default=false
fi

if [ $up_status -ne 0 ]; then
    exit $up_status
fi

# Function to setup SELinux contexts if needed
setup_selinux() {
  # Check if SELinux is available and enforcing
  if ! command -v getenforce >/dev/null 2>&1; then
    return 0 # SELinux not available, skip
  fi

  local selinux_status
  selinux_status=$(getenforce 2>/dev/null || echo "Disabled")

  if [ "$selinux_status" != "Enforcing" ]; then
    return 0 # SELinux not enforcing, skip
  fi

  echo "🔒 SELinux is enforcing. Setting up container file contexts for project..."

  # Set SELinux file context for this project directory
  if sudo semanage fcontext -a -t container_file_t "${PROJECT_ROOT_DIR}(/.*)?"; then
    echo "   SELinux context rule added for ${PROJECT_ROOT_DIR}"
  else
    echo "   SELinux context rule already exists or failed to add"
  fi

  # Apply the context to all files in the project
  if sudo restorecon -Rv "${PROJECT_ROOT_DIR}"; then
    echo "   SELinux contexts applied successfully"
  else
    echo "⚠️  Warning: Failed to apply SELinux contexts"
    return 1
  fi

  return 0
}

# The docker-compose up command has finished.
# Now, conditionally run SELinux setup and permissions script.
PERMISSION_FLAG_FILE="${PROJECT_ROOT_DIR}/.permissions_set"

# We run the script if the flag file doesn't exist (first run) or if --build was passed.
if [ ! -f "${PERMISSION_FLAG_FILE}" ] || [ "$force_permission_check" = true ]; then
  echo ""
  if [ ! -f "${PERMISSION_FLAG_FILE}" ]; then
    echo "🔐 First start detected. Setting up SELinux and applying host permissions for the ./src directory..."
  else
    echo "🔐 --build flag detected. Re-setting up SELinux and applying host permissions for the ./src directory..."
  fi

  # Setup SELinux contexts if needed
  setup_selinux

  # Fix src directory ownership for container access
  if [ -d "${PROJECT_ROOT_DIR}/src" ]; then
    echo "🔧 Setting proper ownership for ./src directory..."
    if sudo chown -R 1000:1000 "${PROJECT_ROOT_DIR}/src"; then
      echo "   Ownership set to 1000:1000 for ./src"
    else
      echo "⚠️  Warning: Failed to set ownership for ./src directory"
    fi
  fi

  if [ -f "${PERMISSION_SCRIPT_PATH}" ]; then
    if [ ! -x "${PERMISSION_SCRIPT_PATH}" ]; then
      chmod +x "${PERMISSION_SCRIPT_PATH}"
    fi

    # Execute the permission script and create the flag file on success
    if "${PERMISSION_SCRIPT_PATH}"; then
      touch "${PERMISSION_FLAG_FILE}"
      echo "   SELinux setup and permissions applied successfully."
    else
      echo "⚠️ Error: Permission script failed. It will be run again on the next start."
    fi
  else
    echo "⚠️ Error: Permission script not found at ${PERMISSION_SCRIPT_PATH}"
    exit 1
  fi
else
  echo ""
  echo "✅ Permissions already set. Skipping."
fi

# Ensure wp-config.php exists
ensure_wp_config

# Check if WordPress needs to be installed
if [ -f ".env" ]; then
  source .env
  if ! ./wp core is-installed >/dev/null 2>&1; then
    echo "📦 WordPress not installed. Installing now..."
    ./wp core install \
      --url="${WP_URL}" \
      --title="${WP_TITLE}" \
      --admin_user="${WP_ADMIN_USER}" \
      --admin_password="${WP_ADMIN_PASSWORD}" \
      --admin_email="${WP_ADMIN_EMAIL}" \
      --skip-email

    # Activate plugins and theme
    ./wp plugin activate --all
    ./wp theme activate twentytwentyfive

    echo "✅ WordPress installation completed!"
  fi
fi

echo ""
echo "🎉 Docker environment is up and SELinux setup/permissions have been processed."

# Determine if services are running in detached mode for the final message
running_detached=false
if [ "$was_detached_by_default" = true ]; then
  running_detached=true
else
  # Check if -d or --detach is in the arguments provided by the user
  for arg in "$@"; do
    if [[ "$arg" == "-d" ]] || [[ "$arg" == "--detach" ]]; then
      running_detached=true
      break
    fi
  done
fi

if [ "$running_detached" = true ]; then
  echo "   Services are running in detached mode."
else
  echo "   Services were started in the foreground. If you stop them (Ctrl+C), permissions are already set for the next run."
fi

echo "   Usage: './start' (defaults to detached mode)."
echo "   You can pass any 'docker-compose up' arguments, e.g., './start --build -d', './start wordpress'."
echo "   If arguments are provided and '-d' or '--detach' is not among them, services will likely start in the foreground (e.g., './start --build')."
echo "   To stop services, run './stop' or 'docker-compose down'."
